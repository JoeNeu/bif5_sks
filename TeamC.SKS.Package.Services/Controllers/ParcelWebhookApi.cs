/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using TeamC.SKS.Package.Services.Attributes;

using Microsoft.AspNetCore.Authorization;
using TeamC.SKS.Package.Services.DTOs.Models;
using TeamC.SKS.DataAccess.Interfaces;
using AutoMapper;
using Microsoft.Extensions.Logging;
using DAL = TeamC.SKS.DataAccess.Entities;

namespace TeamC.SKS.Package.Services
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ParcelWebhookApi : ControllerBase
    {
        private readonly IWebhookRepository _webrep;
        private readonly IMapper _mapper;
        private readonly ILogger _logger;
        /// <summary>
        /// 
        /// </summary>
        /// <param name="webrep"></param>
        /// <param name="mapper"></param>
        /// <param name="logger"></param>
        public ParcelWebhookApi(IWebhookRepository webrep, IMapper mapper, ILogger<ParcelWebhookApi> logger)
        {
            _webrep = webrep;
            _mapper = mapper;
            _logger = logger;
            _logger.LogTrace("created ParcelWebhookApi Controller");
        }
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Gets all registered subscriptions for the parcel webhook.</remarks>
        /// <param name="trackingId"></param>
        /// <response code="200">List of webooks for the &#x60;trackingId&#x60;</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpGet]
        [Route("/api/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("ApiParcelByTrackingIdWebhooksGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(WebhookResponses), description: "List of webooks for the &#x60;trackingId&#x60;")]
        public virtual IActionResult ApiParcelByTrackingIdWebhooksGet([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")]string trackingId)
        {
            try
            {
                //search for parcel with trackingId
                if (!_webrep.GetParcelByTrackingID(trackingId)) return StatusCode(404);

                var hookList = _webrep.GetWebhooksByTrackingID(trackingId);

                return StatusCode(200, hookList);
            }
            catch (DAL.DALException exc)
            {
                return handleReturn(System.Reflection.MethodBase.GetCurrentMethod().Name, exc);
            }
            catch (Exception exc)
            {
                return handleReturn(System.Reflection.MethodBase.GetCurrentMethod().Name, exc);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Subscribes to a webhook notification for the specific parcel.</remarks>
        /// <param name="trackingId"></param>
        /// <param name="url"></param>
        /// <response code="200">Successful response</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpPost]
        [Route("/api/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("ApiParcelByTrackingIdWebhooksPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(WebhookResponse), description: "Successful response")]
        public virtual IActionResult ApiParcelByTrackingIdWebhooksPost([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")]string trackingId, [FromQuery][Required()]string url)
        {
            try
            {
                //search for parcel with trackingId
                if (!_webrep.GetParcelByTrackingID(trackingId)) return StatusCode(404);
                //create new Webhook
                WebhookResponse newHook = new WebhookResponse()
                {
                    TrackingId = trackingId,
                    Url = url,
                    CreatedAt = DateTime.Now
                };
                var DALWebhook = _mapper.Map<DAL.Webhook>(newHook);
                long newId = _webrep.Create(DALWebhook);
                newHook.Id = newId;
                return StatusCode(200, newHook);
            }
            catch (DAL.DALException exc)
            {
                return handleReturn(System.Reflection.MethodBase.GetCurrentMethod().Name, exc);
            }
            catch (Exception exc)
            {
                return handleReturn(System.Reflection.MethodBase.GetCurrentMethod().Name, exc);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Removes an existing webhook subscription.</remarks>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Subscription does not exist.</response>
        [HttpDelete]
        [Route("/api/parcel/webhooks/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ApiParcelWebhooksByIdDelete")]
        public virtual IActionResult ApiParcelWebhooksByIdDelete([FromRoute][Required]long id)
        {
            try
            {
                if (_webrep.GetWebhookByID(id))
                {
                    _webrep.Delete(id);
                    return StatusCode(200);
                }
                return StatusCode(404);
            }
            catch (DAL.DALException exc)
            {
                return handleReturn(System.Reflection.MethodBase.GetCurrentMethod().Name, exc);
            }
            catch (Exception exc)
            {
                return handleReturn(System.Reflection.MethodBase.GetCurrentMethod().Name, exc);
            }
        }


        private IActionResult handleReturn(string method, Exception exception = null)
        {
            if (exception != null)
            {
                _logger.LogError(exception.ToString());
                //throw new ServicesException($"{exception.GetType()} Exception in {method}", exception);
            }
            _logger.LogWarning(method);
            Error err = new Error() { ErrorMessage = $"{method} failed with Message-> {exception.Message}" };
            return BadRequest(err);
        }
    }
}
