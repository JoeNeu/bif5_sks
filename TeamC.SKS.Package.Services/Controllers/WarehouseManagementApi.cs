/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using TeamC.SKS.Package.Services.Attributes;
using Microsoft.AspNetCore.Authorization;
using TeamC.SKS.Package.Services.DTOs.Models;
using TeamC.SKS.Package.Services.Mapper;
using AutoMapper;
using TeamC.SKS.BusinessLogic.Interfaces;
using BL = TeamC.SKS.BusinessLogic.Entities;
using Microsoft.Extensions.Logging;

namespace TeamC.SKS.Package.Services.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WarehouseManagementApi : ControllerBase
    {
        private readonly IWarehouseManagementLogic _whLogic;
        private readonly IMapper _mapper;
        private readonly ILogger _logger;
        /// <summary>
        /// 
        /// </summary>
        /// <param name="whLogic"></param>
        /// <param name="mapper"></param>
        /// <param name="logger">Dieser Logger logged was zu loggen ist</param>
        public WarehouseManagementApi(IWarehouseManagementLogic whLogic, IMapper mapper, ILogger<WarehouseManagementApi> logger)
        {
            _whLogic = whLogic;
            _mapper = mapper;
            _logger = logger;
            _logger.LogTrace("created WarehouseManagementApi Controller");
        }
        /// <summary>
        /// Exports the hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <response code="200">Successful response</response>
        /// <response code="400">An error occurred loading.</response>
        /// <response code="404">No hierarchy loaded yet.</response>
        [HttpGet]
        [Route("/api/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ExportWarehouses")]
        [SwaggerResponse(statusCode: 200, type: typeof(Warehouse), description: "Successful response")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "An error occurred loading.")]
        //[SwaggerResponse(statusCode: 404, description: "No hierarchy loaded yet.")]
        public virtual IActionResult ExportWarehouses()
        {
            try
            {
                _logger.LogTrace("ExportWarehouses");
                var root = _whLogic.ExportHierarchy();
                if (root.Code == null)
                {
                    return StatusCode(404);
                }
                var DTOmapped = _mapper.Map<Warehouse>(root);
                return StatusCode(200, DTOmapped);
            }
            //catch (Exception e)
            //{
            //    Error err = new Error();
            //    err.ErrorMessage = e.Message;
            //    return StatusCode(400, err);
            //}
            catch (BL.BLException exc)
            {
                return handleReturn(System.Reflection.MethodBase.GetCurrentMethod().Name, exc);
            }
            catch (Exception exc)
            {
                return handleReturn(System.Reflection.MethodBase.GetCurrentMethod().Name, exc);
            }
        }

        /// <summary>
        /// Imports a hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <param name="root"></param>
        /// <response code="200">Successfully loaded.</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/api/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ImportWarehouses")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult ImportWarehouses([FromBody]Warehouse root)
        {
            try
            {
                _logger.LogTrace("ImportWarehouses");
                var BLmapped = _mapper.Map<BL.Warehouse>(root);
                _whLogic.ImportHierarchy(BLmapped);
                return StatusCode(200);
            }
            catch (BL.BLException exc)
            {
                return handleReturn(System.Reflection.MethodBase.GetCurrentMethod().Name, exc);
            }
            catch (Exception exc)
            {
                return handleReturn(System.Reflection.MethodBase.GetCurrentMethod().Name, exc);
            }
        }

        private IActionResult handleReturn(string method, Exception exception = null)
        {
            if (exception != null)
            {
                _logger.LogError(exception.ToString());
                //throw new ServicesException($"{exception.GetType()} Exception in {method}", exception);
            }
            _logger.LogWarning(method);
            Error err = new Error() { ErrorMessage = $"{method} failed with Message-> {exception.Message}" };
            return BadRequest(err);
        }
    }
}
